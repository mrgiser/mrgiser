<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何本地调试-JStorm程序]]></title>
    <url>%2F2017%2F11%2F15%2F%E5%A6%82%E4%BD%95%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95-JStorm-%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[JStorm 提供了两种运行模式：本地模式和分布式模式。本地模式针对开发调试storm topologies非常有用。 如果你还在用日常的web ui提交拓扑这种远古的方式进行调试测试，那就赶快阅读本文吧。本文将介绍在本机不安装JStorm环境的情况下，开发、调试JStorm程序。 单机模式主要是在代码中加入：import backtype.storm.LocalCluster; LocalCluster cluster = new LocalCluster(); //建议加上这行，使得每个bolt/spout的并发度都为1 conf.put(Config.TOPOLOGY_MAX_TASK_PARALLELISM, 1); //提交拓扑 cluster.submitTopology("SequenceTest", conf, builder.createTopology()); //等待1分钟， 1分钟后会停止拓扑和集群， 视调试情况可增大该数值 Thread.sleep(60000); //结束拓扑 cluster.killTopology("SequenceTest"); cluster.shutdown(); 用LocalCluster来模拟集群环境，你可以在LocalCluster对象上调用submitTopology方法来提交拓扑，submitTopology(String topologyName, Map conf, StormTopology topology)接受一个拓扑名称，一个拓扑的配置，以及一个拓扑的对象。就像StormSubmitter一样。你还可以调用killTopology来结束一个拓扑。对应的还有active,deactive,rebalance等方法。由于JStorm是个不会停止的程序，所以我们最后需要显示地停掉集群。 修改pom.xml以jstorm 2.1.1版本为例。 &lt;dependency&gt; &lt;groupId&gt;com.alibaba.jstorm&lt;/groupId&gt; &lt;artifactId&gt;jstorm-core&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt; &lt;!-- keep jstorm out of the jar-with-dependencies --&gt; &lt;!-- &lt;scope&gt;provided&lt;/scope&gt; --&gt; &lt;/dependency&gt; 注意要注释掉jstorm依赖中的&lt;scope&gt;provided&lt;/scope&gt;，而提交的时候必须记得将这行改回来！ 否则会报多个defaults.yaml的错误。 注：如果依赖的是 0.9.x 版本的jstorm，会有三个依赖包，将这三个依赖的provided都注释掉。 Re-import 项目， 然后运行main class就可以了。为了更好的代码组织，建议将本地运行和集群运行写成两个方法，根据参数/配置来调用不同的运行方式。更多可以参照SequenceTopology的例子 注意点本地调试主要是用于测试应用逻辑的，因此有一些限制，如classloader是不起作用的。此外，还需要注意一下你的应用中log4j的依赖，如果应用的依赖中自带了log4j.properties，则有可能导致将jstorm默认的本地测试的log4j配置覆盖掉，从而导致调试时控制台没有任何输出。]]></content>
      <categories>
        <category>JStorm</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>JStorm</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2013%2F07%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>Hello World</tag>
      </tags>
  </entry>
</search>
