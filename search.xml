<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[如何本地调试-JStorm程序]]></title>
    <url>%2F2017%2F11%2F15%2F%E5%A6%82%E4%BD%95%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95-JStorm-%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[JStorm 提供了两种运行模式：本地模式和分布式模式。本地模式针对开发调试storm topologies非常有用。 如果你还在用日常的web ui提交拓扑这种远古的方式进行调试测试，那就赶快阅读本文吧。本文将介绍在本机不安装JStorm环境的情况下，开发、调试JStorm程序。 单机模式主要是在代码中加入：import backtype.storm.LocalCluster; LocalCluster cluster = new LocalCluster(); //建议加上这行，使得每个bolt/spout的并发度都为1 conf.put(Config.TOPOLOGY_MAX_TASK_PARALLELISM, 1); //提交拓扑 cluster.submitTopology("SequenceTest", conf, builder.createTopology()); //等待1分钟， 1分钟后会停止拓扑和集群， 视调试情况可增大该数值 Thread.sleep(60000); //结束拓扑 cluster.killTopology("SequenceTest"); cluster.shutdown(); 用LocalCluster来模拟集群环境，你可以在LocalCluster对象上调用submitTopology方法来提交拓扑，submitTopology(String topologyName, Map conf, StormTopology topology)接受一个拓扑名称，一个拓扑的配置，以及一个拓扑的对象。就像StormSubmitter一样。你还可以调用killTopology来结束一个拓扑。对应的还有active,deactive,rebalance等方法。由于JStorm是个不会停止的程序，所以我们最后需要显示地停掉集群。 修改pom.xml以jstorm 2.1.1版本为例。 &lt;dependency&gt; &lt;groupId&gt;com.alibaba.jstorm&lt;/groupId&gt; &lt;artifactId&gt;jstorm-core&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt; &lt;!-- keep jstorm out of the jar-with-dependencies --&gt; &lt;!-- &lt;scope&gt;provided&lt;/scope&gt; --&gt; &lt;/dependency&gt; 注意要注释掉jstorm依赖中的&lt;scope&gt;provided&lt;/scope&gt;，而提交的时候必须记得将这行改回来！ 否则会报多个defaults.yaml的错误。 注：如果依赖的是 0.9.x 版本的jstorm，会有三个依赖包，将这三个依赖的provided都注释掉。 Re-import 项目， 然后运行main class就可以了。为了更好的代码组织，建议将本地运行和集群运行写成两个方法，根据参数/配置来调用不同的运行方式。更多可以参照SequenceTopology的例子 注意点本地调试主要是用于测试应用逻辑的，因此有一些限制，如classloader是不起作用的。此外，还需要注意一下你的应用中log4j的依赖，如果应用的依赖中自带了log4j.properties，则有可能导致将jstorm默认的本地测试的log4j配置覆盖掉，从而导致调试时控制台没有任何输出。]]></content>
      <categories>
        <category>JStorm</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>java</tag>
        <tag>JStorm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建与配置：Hexo-github-域名绑定]]></title>
    <url>%2F2016%2F11%2F15%2F%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E9%85%8D%E7%BD%AE%EF%BC%9AHexo-github-%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%2F</url>
    <content type="text"><![CDATA[最近想搭建个人的博客网站，查询一些信息以后决定采用Hexo+Github Pages的方式。该方法站在巨人的肩膀上，很是方便快捷，找了个很喜欢的主题，做了点配置就可以，最后在阿里云上买了个域名，成功搞定就差写博客了。这里就说一下建站的整个过程。个人博客地址http://he-zhao.cn 前期准备 Github账号注册 Node.js安装 git安装 Github Pages注册了Github账号以后，每个账号可以建一个Github Pages Create a new repository后，严格使用你的github用户名+.github.io命名新的repository，例如我的用户名为mrgiser，新建的取名为 mrgiser.github.io，其他设置不用关心，这样GIthub Pages 所需要的版本库也创建好了。 安装Hexo安装好Git跟Node.js后，在cmd中执行12$ npm install -g hexo-cli //安装hexo客户端$ npm install hexo-deployer-git --save //安装用于部署到Git的插件 以上完成之后，执行下面的命令，Hexo将会在指定文件夹中新建所需要的文件。123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 至此，hexo安装完成。 修改主题其实安装hexo的过程很简单，主要时间花在了找主题以及主题配置上了。我选择了一款在NexT上修改的主题iissnan。 进入Hexo文件夹。然后使用下面的命令clone下iissnan主题，主题的文件代码将被下载至themes/iissnan文件夹中。1$ git clone https://github.com/mrgiser/mrgiser.github.io.git themes/iissnan 打开博客主文件夹下的_config.yml，修改其中的theme 属性。theme: 后面要加空格。1theme: iissnan 本地部署部署在本地方便查看调试效果，命令如下：12$ hexo g #在public文件夹下生成静态页面$ hexo s #启动本地服务，进行文章预览调试,浏览器输入http://localhost:4000查看效果 发布到Github Pages先对Git进行配置：12$ git config --global user.name &quot;your name&quot;$ git config --global user.email &quot;email@email.com&quot; 博客主文件夹下的_config.yml,也就是 站点配置文件 ，配置其中的deploy参数，详细请查看官方文档中部署部分。我的设置如下所示：1234deploy: type: git repository: git@github.com:mrgiser/mrgiser.github.io.git branch: master 配置完成保存后，执行以下命令将代码同步到github pages上：12$ hexo g #需要先生成静态文件$ hexo d #将代码部署到github 输入https://XXXX.github.io访问个人github pages，其中XXXX为你github的用户名。 Hexo配置请记住博客主文件夹下的blog_config.yml为站点配置文件，主题配置文件为blog\themes\iissnan_config.yml。 作者、标题、描述、语言等站点配置修改 站点配置文件 中的如下配置：1234567# Sitetitle: Pegasussubtitle: description: 记录生活，写点东西author: Pegasus.Helanguage: zh-Hanstimezone: 导航栏与侧边栏在导航栏中加入归档、分类、标签、关于等，在主题配置文件中修改如下部分123456menu: home: / || home archives: /archives/ || archive tags: /tags/ || tags categories: /categories/ || th about: /about/ || user 社交信息添加在主题配置文件中修改如下部分123456social: GitHub: https://github.com/XXXXXX|| github E-Mail: mailto:XXXXXXXX || envelope #Google: https://plus.google.com/yourname || google #Twitter: https://twitter.com/yourname || twitter #FB Page: https://www.facebook.com/yourname || facebook 头像在主题配置文件中修改如下部分,添加头像照片1234# Sidebar Avatar# in theme directory(source/images): /images/avatar.gif# in site directory(source/uploads): /uploads/avatar.gifavatar: /images/IMG_3428.JPG 其他主题配置其他主题配置可参考next使用文档，Git上的有关主题的问答 域名配置这里讲述在阿里云上购买的域名如何配置，登陆阿里云-控制台-域名服务-域名，选择需要配置的域名，点击解析。删除默认所有主机记录为@的记录，添加解析参考如下： 在blog\source\文件夹下新建文件CNAME（在此新建文件，可以保证hexo d的时候不会删除掉），文本打开编辑，添加个人购买的域名，例如he-zhao.cn重新部署12$ hexo g #需要先生成静态文件$ hexo d #将代码部署到github 至此域名绑定就完成了，访问自己的域名时，会显示github pages的页面。 写在最后个人博客网站建好了，更重要的是好好记录。最后个人博客地址希望支持，后期会增加一些技术博客，希望支持。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2013%2F07%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
        <tag>安装</tag>
      </tags>
  </entry>
</search>
